{"version":3,"sources":["Components/AddSerie.js","Components/GifsImgLoad.js","Helpers/GetGifs.js","hooks/useFechGits.js","Components/GitsImg.js","GitLoad.js","index.js"],"names":["AddSerie","AddSerieHook","useState","newSerie","setNewSerie","onSubmit","e","preventDefault","trim","length","series","console","log","type","onChange","serie","target","value","placeholder","GifsImgLoad","id","gif","title","className","src","alt","getImges","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","useFechGits","categorias","Data","load","state","setState","useEffect","setTimeout","then","GitsImg","Series","Gits","GitLoad","setSerie","ReactDOM","render","document","getElementById"],"mappings":"yLA0CeA,EAvCE,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAAkB,EAEDC,mBAAS,KAFR,mBAE1BC,EAF0B,KAEhBC,EAFgB,KAoBjC,OACI,uBAAMC,SAZY,SAACC,GAEnBA,EAAEC,iBACEJ,EAASK,OAAOC,OAAS,GAC5BR,GAAe,SAAAS,GAAM,OAAMP,GAAN,mBAAqBO,OAC1CN,EAAY,KAERO,QAAQC,IAAI,iBAKjB,UACK,wDACA,uBACGC,KAAM,OACNC,SArBQ,SAACR,GACjBF,GAAY,SAACW,GAAD,OAAmBT,EAAEU,OAAOC,UAqBhCC,YAAc,yBACdD,MAASd,Q,QCnBVgB,EATK,SAAC,GAAwB,EAAtBC,GAAuB,IAAlBC,EAAiB,EAAjBA,IAAMC,EAAW,EAAXA,MAC9B,OACI,sBAAKC,UAAY,iEAAjB,UACK,qBAAKC,IAAMH,EAAKI,IAAMH,EAAOC,UAAW,0CACxC,mBAAGA,UAAU,yDAAb,SAAuED,Q,uBCNvEI,EAAQ,uCAAE,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,0DAE4CC,UAAUH,GAFtD,sDAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIGA,EAAKC,OAJR,uBAIXC,EAJW,EAIXA,KAGDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHjB,GAAIiB,EAAIjB,GACRE,MAAOe,EAAIf,MACXD,IAAKgB,EAAIC,OAAOC,iBAAiBV,QAXvB,kBAeXM,GAfW,4CAAF,sDC0BNK,EAvBK,SAACC,GAAgB,IAAD,EAENvC,mBAAS,CAC5BwC,KAAK,GACLC,MAAK,IAJoB,mBAEzBC,EAFyB,KAElBC,EAFkB,KAmBhC,OAZAC,qBAAU,WACHC,YAAW,WACRrB,EAASe,GACLO,MAAM,SAAAX,GACJQ,EAAS,CACLH,KAAK,YAAIL,GACTM,MAAK,SAGhB,QACP,CAACF,IAEIG,GCMIK,EAvBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAAY,EAGFV,EAAYU,GAA3BC,EAHiB,EAGtBT,KAAYC,EAHU,EAGVA,KAEjB,OACG,qCACG,6BAAKO,IACCP,EAAO,GAAI,mBAAGpB,UAAW,2DAAd,+BACf,qBAAKA,UAAU,WAAf,SAEO4B,EAAKf,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADEA,EAAIjB,aCkChBgC,EA7CC,WAAQ,IAAD,EAESlD,mBAAS,CAAC,YAFnB,mBAEXgD,EAFW,KAEHG,EAFG,KAYlB,OACI,qCACG,0CACA,uBACC,cAAC,EAAD,CAAUpD,aAAgBoD,IAC3B,6BAEQH,EAAOd,KAAK,SAAArB,GAAK,OACT,cAAC,EAAD,CAAUmC,OAASnC,GAAaA,YCnB5DuC,IAASC,OACN,cAAC,EAAD,IAEDC,SAASC,eAAe,W","file":"static/js/main.363382c7.chunk.js","sourcesContent":["import React , {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddSerie = ({AddSerieHook}) => {\r\n    \r\n    const [newSerie, setNewSerie] = useState(' ')\r\n    \r\n    const ChangeValue = (e) => {\r\n        setNewSerie((serie) => serie = e.target.value )\r\n    }\r\n\r\n    \r\n    const SubmiAddSerie = (e) => {\r\n         \r\n        e.preventDefault();\r\n         if(newSerie.trim().length > 2 ){\r\n         AddSerieHook ( series => [ newSerie  , ...series ]);\r\n         setNewSerie('');\r\n         }else{\r\n             console.log('aaaaaa malll');\r\n         }\r\n  \r\n    }\r\n    return (\r\n        <form onSubmit = {SubmiAddSerie} >\r\n             <p>Ingrese una nueva serie</p>\r\n             <input  \r\n                type =\"text\"\r\n                onChange = {ChangeValue}\r\n                placeholder = 'El nombre de una serie'\r\n                value = {newSerie}\r\n             />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddSerie.propTypes = {\r\n    AddSerieHook: PropTypes.func.isRequired, \r\n}\r\n\r\n\r\n\r\nexport default AddSerie ;","import React from 'react'\r\n\r\nconst GifsImgLoad = ( {id , gif , title}) => {\r\n    return (\r\n        <div className = 'gif-cpntent animate__animated animate__fadeInUp animate__fast ' >\r\n             <img src ={gif} alt ={title} className =\"animate__animated animate__backInDown\"/>\r\n             <p className=\"animate__animated animate__fadeInDownBig animate__slow\">{title}</p>  \r\n        </div>\r\n    )\r\n }\r\n\r\nexport default GifsImgLoad; \r\n","export const getImges =async(category) => {\r\n    //se usa el mas para rellenar espacios vacios\r\n    const url = `https://api.giphy.com/v1/gifs/search?limit=18&q=${encodeURI(category)}&api_key=BvVSkWPflAOjzoBRdJqFICzCh2eWayUw`;\r\n    const resp = await fetch(url); //await paae que espere el codigo espere a que la promesa se cumpla\r\n    const  {data} = await resp.json(); \r\n   \r\n     //para optner solo los datos requeridos\r\n     const gifs = data.map( img =>{\r\n         return {\r\n             id: img.id,\r\n             title: img.title,\r\n             gif: img.images.downsized_medium.url,\r\n         }\r\n     })\r\n     //inteframos los valores en le hook\r\n     return gifs\r\n }","import  { useEffect, useState } from 'react'\r\nimport {getImges} from '../Helpers/GetGifs'\r\n\r\nconst useFechGits = (categorias) => {\r\n    \r\n    const [state, setState] = useState({\r\n           Data:[],\r\n           load:false,       \r\n    })\r\n\r\n    useEffect(()=>{\r\n           setTimeout(() =>{\r\n              getImges(categorias)\r\n                 .then( img => {\r\n                    setState({\r\n                        Data:[...img],\r\n                        load:true,\r\n                    })\r\n                 })\r\n           },2200)\r\n    },[categorias])\r\n\r\n    return state ;\r\n\r\n}\r\n\r\nexport default useFechGits;\r\n","import React  from 'react'\r\n\r\nimport GifsImgLoad from './GifsImgLoad';\r\nimport  useFechGits from '../hooks/useFechGits'\r\n\r\nconst GitsImg =  ({Series}) => {\r\n  \r\n\r\n  const {Data:Gits , load} = useFechGits(Series)\r\n    \r\n    return (\r\n       <> \r\n          <h2>{Series}</h2>\r\n               {load ? \"\" :<p className ='animate__animated animate__fadeOutDown animate__delay-2s'>Cargando Gits....</p> }\r\n            <div className='box-Gifs'>\r\n            {\r\n                   Gits.map( img => (\r\n                     <GifsImgLoad \r\n                     key ={img.id} \r\n                     {...img} \r\n                     />\r\n                  )\r\n                  )}\r\n            </div>  \r\n       </>\r\n    )\r\n}\r\n\r\nexport default GitsImg\r\n\r\n\r\n\r\n//notas\r\n\r\n  //el uso de este termino es le control de render que\r\n  //tiene el useState que hace que le parte del codigo\r\n  //que solo queremos que se usen solo una vez no se vuelva\r\n  //a ejecutar\r\n//   useEffect(() => {\r\n//     getImges(Series)\r\n//     .then( gits => setImagenes(gits) )\r\n//  }, [Series]); \r\n//se define para saber cuando una variable cambie se vuelva ejecutar la funcion dentro\r\n\r\n //para que funcione tenemos aÃ±adir las dependecia y basta con que solo se ponga el [] \r\n // resultado = a que la funcion solo se ejecute una sola vez\r\n","import React, { useState}   from 'react';\r\n\r\n\r\nimport AddSerie from './Components/AddSerie'\r\nimport  GitsImg from './Components/GitsImg'\r\n\r\n\r\nconst GitLoad = ()  => {\r\n \r\n     const [Series, setSerie] = useState(['re:zero',])\r\n   \r\n     /*\r\n    const  AddSerie = () =>{\r\n         let newSerie = 'NoteDeaht'\r\n          //esta es una forma de agrgar datos sin usar push\r\n         setstate( (Series) =>  [newSerie , ...Series ])\r\n    } \r\n   */\r\n\r\n     return(\r\n         <>\r\n            <h2>Git load</h2>\r\n            <hr/>\r\n             <AddSerie AddSerieHook = {setSerie} /> \r\n            <ul>\r\n                 {\r\n                    Series.map( serie =>(\r\n                            <GitsImg  Series ={serie} key ={serie} />\r\n                    ) )\r\n                 }\r\n            </ul>\r\n\r\n         </>\r\n     )\r\n         \r\n      \r\n\r\n}\r\n\r\n\r\n//Notas\r\n/*\r\n  1. para mostar  un arreglo tenemos que pasarlo por un porce map para mostar toso\r\n   los elemetos como una etiqueta html\r\n\r\n  2.la key es indicar que elemento de array se esta mostrando \r\n\r\n  3. para poner valores de dentro del map se usan las {} para usar variables\r\n*/ \r\n\r\n\r\n\r\nexport default GitLoad ;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n//importacion de componentes\nimport GitLoad from './GitLoad'\n\n\nReactDOM.render(\n   <GitLoad />\n  ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}